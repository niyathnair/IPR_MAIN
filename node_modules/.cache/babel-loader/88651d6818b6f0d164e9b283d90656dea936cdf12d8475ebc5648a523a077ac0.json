{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../Styles/SystemMonitor.css';\n\n// function SystemMonitor() {\n//   const [stats, setStats] = useState(null);\n\n//   useEffect(() => {\n//     const fetchStats = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:4000/stats');\n//         setStats(response.data);\n//       } catch (error) {\n//         console.error('Error fetching stats:', error);\n//       }\n//     };\n\n//     fetchStats();\n//     const interval = setInterval(fetchStats, 5000); // Fetch stats every 5 seconds\n\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   if (!stats) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div className=\"SystemMonitor\">\n//       <h1>System Monitor</h1>\n//       <h2>CPU Load: {stats.cpu.toFixed(2)}%</h2>\n//       <h2>Memory Usage:</h2>\n//       <ul>\n//         <li>Total: {(stats.memory.total / (1024 ** 3)).toFixed(2)} GB</li>\n//         <li>Used: {(stats.memory.used / (1024 ** 3)).toFixed(2)} GB</li>\n//         <li>Free: {(stats.memory.free / (1024 ** 3)).toFixed(2)} GB</li>\n//       </ul>\n//       <h2>Running Applications:</h2>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>CPU %</th>\n//             <th>Memory</th>\n//             <th>Network In</th>\n//             <th>Network Out</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {stats.processes.slice(0, 10).map((process) => (\n//             <tr key={process.pid}>\n//               <td>{process.name}</td>\n//               <td>{process.pcpu.toFixed(2)}%</td>\n//               <td>{(process.mem / (1024 * 1024)).toFixed(2)} MB</td>\n//               <td>{(stats.network.find(n => n.iface === process.name)?.rx_sec || 0).toFixed(2)} MB/s</td>\n//               <td>{(stats.network.find(n => n.iface === process.name)?.tx_sec || 0).toFixed(2)} MB/s</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default SystemMonitor;","map":{"version":3,"names":[],"sources":["C:/Users/nickn/Desktop/Task_Manager_psql/task-manager/src/components/SystemMonitor.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import '../Styles/SystemMonitor.css';\r\n\r\n// function SystemMonitor() {\r\n//   const [stats, setStats] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchStats = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:4000/stats');\r\n//         setStats(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching stats:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchStats();\r\n//     const interval = setInterval(fetchStats, 5000); // Fetch stats every 5 seconds\r\n\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   if (!stats) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"SystemMonitor\">\r\n//       <h1>System Monitor</h1>\r\n//       <h2>CPU Load: {stats.cpu.toFixed(2)}%</h2>\r\n//       <h2>Memory Usage:</h2>\r\n//       <ul>\r\n//         <li>Total: {(stats.memory.total / (1024 ** 3)).toFixed(2)} GB</li>\r\n//         <li>Used: {(stats.memory.used / (1024 ** 3)).toFixed(2)} GB</li>\r\n//         <li>Free: {(stats.memory.free / (1024 ** 3)).toFixed(2)} GB</li>\r\n//       </ul>\r\n//       <h2>Running Applications:</h2>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Name</th>\r\n//             <th>CPU %</th>\r\n//             <th>Memory</th>\r\n//             <th>Network In</th>\r\n//             <th>Network Out</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {stats.processes.slice(0, 10).map((process) => (\r\n//             <tr key={process.pid}>\r\n//               <td>{process.name}</td>\r\n//               <td>{process.pcpu.toFixed(2)}%</td>\r\n//               <td>{(process.mem / (1024 * 1024)).toFixed(2)} MB</td>\r\n//               <td>{(stats.network.find(n => n.iface === process.name)?.rx_sec || 0).toFixed(2)} MB/s</td>\r\n//               <td>{(stats.network.find(n => n.iface === process.name)?.tx_sec || 0).toFixed(2)} MB/s</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default SystemMonitor;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}